<local:BasePage x:Class="Mantra.ScanPage"
                x:ClassModifier="internal"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                xmlns:local="clr-namespace:Mantra"
                mc:Ignorable="d"
                d:DataContext="{d:DesignInstance local:ScanViewModel}"
                Title="ScanPage"
                d:DesignHeight="450"
                d:DesignWidth="800">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="3*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- Image Column -->
        <ScrollViewer Grid.Column="0" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"
                      Margin="30">
            <Grid>
                <Image
                    HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    Stretch="Uniform"
                    Source="{Binding ImgSource}"
                    Width="{Binding ImgPixelWidth}"
                    Height="{Binding ImgPixelHeight}"
                    SnapsToDevicePixels="True" />

                <!-- ImgSource Canvas -->
                <ItemsControl ItemsSource="{Binding SourceRectItems}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <!-- Must set background -->
                            <!-- It turns out that if you do not set a background on a UIElement, the element background will not participate in hit-testing -->
                            <Canvas SnapsToDevicePixels="True"
                                    Background="Transparent"
                                    MouseLeftButtonDown="Canvas_OnMouseDown"
                                    MouseLeftButtonUp="Canvas_OnMouseUp"
                                    MouseMove="Canvas_OnMouseMove" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter" d:DataContext="{d:DesignInstance local:Rect}">
                            <Setter Property="Canvas.Left" Value="{Binding Left}" />
                            <Setter Property="Canvas.Top" Value="{Binding Top}" />
                        </Style>
                    </ItemsControl.ItemContainerStyle>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <local:DesignerItemDecorator Resize="True"
                                                         Width="{Binding Width}"
                                                         MouseLeftButtonUp="Canvas_OnMouseUp"
                                                         Height="{Binding Height}"
                                                         Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType=ItemsControl}}">
                                <local:DesignerItemDecorator.ContextMenu>
                                    <ContextMenu>
                                        <!-- 通过Tag中转的方式绑定Command -->
                                        <!-- https://stackoverflow.com/questions/47202690/wpf-command-binding-of-contextmenu-item-inside-itemscontrol -->
                                        <!-- ReSharper disable once Xaml.BindingWithContextNotResolved -->
                                        <MenuItem Header="移除"
                                                  Command="{Binding PlacementTarget.Tag.RemoveCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                                                  CommandParameter="{Binding}" />
                                    </ContextMenu>
                                </local:DesignerItemDecorator.ContextMenu>
                            </local:DesignerItemDecorator>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>
        </ScrollViewer>

        <!-- Tool Column -->
        <ScrollViewer Grid.Column="1"
                      Margin="0 30"
                      HorizontalScrollBarVisibility="Disabled"
                      VerticalScrollBarVisibility="Auto"
                      VerticalAlignment="Top">
            <TabControl>
                <TabItem Header="文字识别">
                    <Button Content="自动识别" Command="{Binding OCRCommand}" />
                </TabItem>
                <TabItem Header="对话分组">
                </TabItem>
            </TabControl>
        </ScrollViewer>
    </Grid>
</local:BasePage>